Table Management Schema.txt
-- This extends your existing database structure

-- Restaurant Tables Table
CREATE TABLE public.restaurant_tables (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  business_id UUID NOT NULL REFERENCES public.business_information(id) ON DELETE CASCADE,
  table_number TEXT NOT NULL,
  is_active BOOLEAN DEFAULT true,
  qr_code_url TEXT, -- Optional: store QR code URL if we decide to store them
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  
  -- Ensure table numbers are unique per business
  UNIQUE(business_id, table_number)
);

-- Add trigger for updated_at
CREATE TRIGGER handle_restaurant_tables_updated_at
  BEFORE UPDATE ON public.restaurant_tables
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_updated_at();

-- Create indexes for better performance
CREATE INDEX idx_restaurant_tables_business_id ON public.restaurant_tables(business_id);
CREATE INDEX idx_restaurant_tables_active ON public.restaurant_tables(is_active);
CREATE INDEX idx_restaurant_tables_table_number ON public.restaurant_tables(table_number);

-- Enable Row Level Security
ALTER TABLE public.restaurant_tables ENABLE ROW LEVEL SECURITY;

-- RLS Policies for restaurant_tables
CREATE POLICY "Users can view own restaurant tables" ON public.restaurant_tables
  FOR SELECT USING (
    business_id IN (
      SELECT id FROM public.business_information WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert own restaurant tables" ON public.restaurant_tables
  FOR INSERT WITH CHECK (
    business_id IN (
      SELECT id FROM public.business_information WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update own restaurant tables" ON public.restaurant_tables
  FOR UPDATE USING (
    business_id IN (
      SELECT id FROM public.business_information WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete own restaurant tables" ON public.restaurant_tables
  FOR DELETE USING (
    business_id IN (
      SELECT id FROM public.business_information WHERE user_id = auth.uid()
    )
  );

-- Allow public access to tables for menu display (customers scanning QR codes)
CREATE POLICY "Public can view active tables for menu display" ON public.restaurant_tables
  FOR SELECT USING (is_active = true);

-- Super admin policies (view all for management purposes)
CREATE POLICY "Super admins can view all restaurant tables" ON public.restaurant_tables
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.user_profiles 
      WHERE id = auth.uid() AND role = 'super-admin' AND status = 'approved'
    )
  );

-- Grant permissions to all required roles
GRANT USAGE ON SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON public.restaurant_tables TO postgres, anon, authenticated, service_role;

-- Add public access policies for menu viewing
-- These allow anonymous users to view menu data when scanning QR codes

-- Public access to business information for menu display
CREATE POLICY "Public can view business info for active menus" ON public.business_information
  FOR SELECT USING (true);

-- Public access to menu categories for active restaurants
CREATE POLICY "Public can view menu categories for menu display" ON public.menu_categories
  FOR SELECT USING (is_active = true);

-- Public access to menu items for active restaurants
CREATE POLICY "Public can view menu items for menu display" ON public.menu_items
  FOR SELECT USING (is_available = true);

-- Public access to menu item sizes for menu display
CREATE POLICY "Public can view menu item sizes for menu display" ON public.menu_item_sizes
  FOR SELECT USING (true);

-- Public access to user profiles for business name display
CREATE POLICY "Public can view user profiles for business names" ON public.user_profiles
  FOR SELECT USING (true);
